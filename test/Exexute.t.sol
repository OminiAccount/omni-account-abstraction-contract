// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.23;

import "forge-std/console.sol";
import "contracts/core/EntryPoint.sol";
import "contracts/interfaces/ITicketManager.sol";
import "contracts/interfaces/PackedUserOperation.sol";
import "contracts/SimpleAccount.sol";
import "contracts/SimpleAccountFactory.sol";
import "contracts/core/SyncRouter.sol";
import "./Utils.sol";
import "script/Address.sol";

contract SyncRouterTest is Utils, AddressHelper {
    uint256 sepoliaFork;
    EntryPoint ep;
    SimpleAccountFactory factory;
    SimpleAccount account1;
    address deployer = owner;
    address account1Owner = address(0x01);
    address account2Owner = address(0xe25A045cBC0407DB4743c9c5B8dcbdDE2021e3Aa);

    struct OutPut {
        PackedUserOperation[] userOps;
        bytes32 newSmtRoot;
        ITicketManager.Ticket[] depositTickets;
        ITicketManager.Ticket[] withdrawTickets;
    }

    function setUp() public {
        string memory SEPOLIA_RPC_URL = vm.envString("SEPOLIA_RPC_URL");
        sepoliaFork = vm.createFork(SEPOLIA_RPC_URL);
        vm.selectFork(sepoliaFork);
        ep = EntryPoint(sepoliaEntryPoint);
        factory = SimpleAccountFactory(sepoliaFactory);

        account1 = factory.createAccount(account1Owner, 0);

        vm.deal(deployer, 100 ether);
        vm.deal(account1Owner, 20 ether);
    }

    function test_userop() public {
        account1OwnerDeposit();
        console.log();

        vm.deal(address(account1), 2 ether);

        bytes memory data = encodeTransferCalldata(account2Owner, 1 ether);
        PackedUserOperation[] memory userOps = new PackedUserOperation[](1);
        address sender = address(account1);
        uint256 chainId = block.chainid;
        bytes memory initCode = "";
        bytes32 accountGasLimits = packUints(40000, 55000);
        uint256 preVerificationGas = 17000;
        bytes32 gasFees = packUints(2500000000, 30000000000);
        bytes memory paymasterAndData = "";
        PackedUserOperation memory account1OwnerUserOp = PackedUserOperation(
            sender,
            chainId,
            initCode,
            data,
            accountGasLimits,
            preVerificationGas,
            gasFees,
            paymasterAndData,
            sender
        );
        userOps[0] = account1OwnerUserOp;
        vm.startPrank(owner);
        ep.verifyBatchMockUserOp{value: 146839574447005}(
            userOps,
            payable(owner)
        );
        vm.stopPrank();
    }

    function test_executeUserop() public {
        bytes
            memory proof = hex"c430ff7f04943bba23bc4788d6d55daa2cf0ddb16d22abaddd9289b9616b129915440bb72fd5229ea2b0877184ad274e9f34135707c99ec193d715f9affa9fcc27603ae91a7aa0f6cc9a0a1067e20ab9378b3a18c240119de9162bde89ff724e025d5e5911783ebb61bb02fc71db913382290fc6ba3ec551cb7f50d86ee0564450289e5d1eec1cc01c137830215cb90e597ee0bbb8ab7d79cdfc5c6454ce8dce231a127302ba548fbed1e4f84787454b947f1e2fcb804bcfd408f8d7367305a563f160f20f6776114b4c1e1a1d9598718b86a8f5e9d0c0a1b3d0a93de9adc9c3a88fa918199a617f2bcbaceaa80228cc71a5b9a0ca6d67840f1747a108e00ba0b885df0e220408484cb497adabe318a63ab81086a42d6abfedc548981a8a954d8afcce8b19162d42f9cf47813aa729ae02ed2a5ad78733fe9dc53184f3a6221fa408053522062a7ca29ed528aa5ede727914ba8a167221167fc5c60c9bbc295db3dc90961cdae8d689416d6a99b8b5a606327b544861c665531d5a0c32558231482cb6062bf6748cd9f94b66d4e31d686aa24423826ef511933c8419e3ec0c232986d21e1e9e2e3260b23b8823cfba42faa0581dd41678084750c6642eaf955865b9d53512213ad94b0e1788a063322d67538b645ec7fbc09a2af0675ae93e19aacd664216bb83bd80f8df29152f0cd5a34ebe60f380e1fca8a59ab9117fc8d3862a94150fb3acf8eb208757c219f354f7e4f8f7523b7052b6c1c52e729f166725187a5000ea8767320ba19446a3a03b7e66165267051d81729a232e50b9ad2b927c49001c6fb36c9ce3d84e2db46619d7dd0bb00e9a934ebede8f0c684487f358afdf952b00c5d165ca669cafa92dd9149e3355f641c3094261559935d2298be885b4c30a96277cbe0342869371f2f56fd3c4e482fc363b52705af1d4dc1174bd4d932c1e8e4014263f938aa43953307bc6dc358fbc4a185b5822c3722c40282847f4432475dc685b1adecf89e568225388f83d13ca52431d28677a6ce02e50477929e00f3d91d0123d131764fc883b923072a38ae0cc35c8227f3f5a38f616a9703b161ac9d6da79175d4b82408a9191928645b3a332b196a41c9fe2424c84af775bed1939f9ec109502f0ecf477f2efbe67cf4ac2300a8d5acadd8134c8d50843dae21a3cacdab0661147975e3c3542dfd6aa7df6084f01ad3a8231572eee850de7f1";
        bytes
            memory proofPublicValues = hex"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000080030284c96e7b7ddc8ddad585448612c2d2d676c540a608775df29ead58a88c090000000000000000000000000000000000000000000000000000000000000520000000000000000000000000000000000000000000000000000000000000066000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000026000000000000000000000000093d53d2d8f0d623c5cbe46daa818177a450bd9f70000000000000000000000000000000000000000000000000000000000aa36a70000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000041eb000000000000000000000000000030d400000000000000000000000000000000000000000000000000000000000029810000000000000000000000006fc23ac00000000000000000000000000773594000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000271416b45f6efa3edf6efdaca7ec6b81040b19a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084b61d27f600000000000000000000000027916984c665f15041929b68451303136fa16653000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000093d53d2d8f0d623c5cbe46daa818177a450bd9f70000000000000000000000000000000000000000000000000000000000aa36a70000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000041eb000000000000000000000000000030d400000000000000000000000000000000000000000000000000000000000029810000000000000000000000006fc23ac00000000000000000000000000773594000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000177bf0001b3c91091b499be6badefbb8dec46ec500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084b61d27f600000000000000000000000027916984c665f15041929b68451303136fa16653000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000fd63ed0566a782ef57f559c6f5f9afece486642300000000000000000000000000000000000000000000000000271471148780000000000000000000000000000000000000000000000000000000000066dab764000000000000000000000000fd63ed0566a782ef57f559c6f5f9afece48664230000000000000000000000000000000000000000000000000b1a2bc2ec5000000000000000000000000000000000000000000000000000000000000066dad27c00000000000000000000000093d53d2d8f0d623c5cbe46daa818177a450bd9f700000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000000000000066dad63c000000000000000000000000000000000000000000000000000000000000000100000000000000000000000093d53d2d8f0d623c5cbe46daa818177a450bd9f700000000000000000000000000000000000000000000000000470de4df8200000000000000000000000000000000000000000000000000000000000066dad63c";

        OutPut memory out = abi.decode(proofPublicValues, (OutPut));
        console.log("123");
        vm.startPrank(owner);
        ep.verifyBatch{value: 1146839574447005}(
            proof,
            proofPublicValues,
            payable(owner)
        );
        vm.stopPrank();
    }

    function account1OwnerDeposit() public {
        vm.recordLogs();
        console.log("=== account1Owner will deposit to ep ===");
        vm.startPrank(account1Owner);
        console.log(
            "account1 deposit balance before should be 20 ether",
            account1Owner.balance
        );
        console.log("ep balance before 0 ether", address(ep).balance);
        account1.addDeposit{value: 10 ether}();
        console.log(
            "account1 deposit balance after 10 ether",
            account1Owner.balance
        );
        console.log("ep balance after 10 ether", address(ep).balance);
        console.log(
            "account1 real deposit amount in ep shoule be 0 ether, because has not prove.",
            account1.getDeposit()
        );
        vm.stopPrank();
        Vm.Log[] memory entries = vm.getRecordedLogs();

        (uint256 amount, uint256 timestamp) = abi.decode(
            entries[0].data,
            (uint256, uint256)
        );

        console.log("=== will execute prove to ep ===");
        vm.roll(10);
        {
            ITicketManager.Ticket[]
                memory depositTickets = new ITicketManager.Ticket[](1);
            ITicketManager.Ticket[]
                memory withdrawTickets = new ITicketManager.Ticket[](0);
            ITicketManager.Ticket memory account1OwnerTicket = ITicketManager
                .Ticket(address(account1), amount, timestamp);
            depositTickets[0] = account1OwnerTicket;
            vm.startPrank(deployer);
            ep.verifyBatchMock(
                depositTickets,
                withdrawTickets,
                payable(deployer)
            );
            vm.stopPrank();

            console.log(
                "account1 real deposit amount in ep shoule be 10 ether, because has prove.",
                account1.getDeposit()
            );
            console.log(
                "account1 deposit balance after shoule be 10 ether",
                account1Owner.balance
            );
        }
    }
}
