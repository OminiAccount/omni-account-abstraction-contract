pragma solidity ^0.8.23;

import "forge-std/console.sol";
import "contracts/core/EntryPoint.sol";
import "contracts/interfaces/core/IPreGasManager.sol";
import "contracts/ZKVizingAccount.sol";
import "contracts/libraries/UserOperationLib.sol";
import "contracts/ZKVizingAccountFactory.sol";
import "contracts/core/SyncRouter/SyncRouter.sol";
import "./Utils.sol";
import "script/Address.sol";
import "contracts/interfaces/core/IEntryPoint.sol";

contract DepositTest is Utils, AddressHelper {
    address ep = 0x5bd25e7d27daC6CAe0368CeDA89066a10aC99b04;
    address payable sr = payable(0x49118E004044dD2BE62075588fcaF2A617fe7dCd);
    address payable account1 =
        payable(address(0x569Db0654a0C9844257A7f496e02F9E7Bc805c0B));

    function setUp() public {
        uint64 chainId = IEntryPoint(ep).getMainChainId();
        console.log("chainId %s", chainId);
        // vm.deal(deployer, 100 ether);
        // vm.deal(account1Owner, 20 ether);
        // // vm.deal(router, 2 ether);
        // vm.startPrank(deployer);
        // ep = new EntryPoint();
        // router = new SyncRouter(address(0), address(0), address(0));
        // gverifier = new Groth16Verifier();
        // ep.updateVerifier(address(gverifier));
        // // ep.updateSyncRouter(address(router));
        // router.setMirrorEntryPoint(uint64(block.chainid), address(ep));
        // factory = new ZKVizingAccountFactory(ep);
        // factory.updateBundler(deployer);
        // account1 = factory.createAccount(account1Owner);
        // console.log("account %s", address(account1));
        // vm.stopPrank();
        // vm.deal(address(account1), 1 ether);
        // console.log("ep address", address(ep));
        // console.log("factory address", address(factory));
        // console.log("account1 balance", address(account1).balance);
        // vm.startPrank(account1Owner);
        // ep.updateVerifier(address(gverifier));
        // vm.stopPrank();
    }

    function test_depositRemote() public {
        console.log(
            "account1 balance pre",
            ZKVizingAccount(account1).getPreGasBalance()
        );
        address _ep = SyncRouter(sr).MirrorEntryPoint(uint64(block.chainid));
        console.log("_ep %s", _ep);
        uint256 amount = 0.002000000000025 ether;
        bytes
            memory data = hex"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff000000000000000000000000000000000000000000000000000000000007a120000000000000000000000000000000000000000000000000000000005c631f800000000000000000000000000000000000000000000000000000000000006f64000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064bb8ce5260000000000000000000000000256235933006c75716e1a34ae28708e4e869675000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000000000000000";
        SyncRouter(sr).testReceiveMessage{value: amount}(data);

        console.log(
            "account1 balance after",
            ZKVizingAccount(account1).getPreGasBalance()
        );
    }
}

// 0x0100000000000000000000000049118e004044dd2be62075588fcaf2a617fe7dcd07a120000000005c631f80000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff000000000000000000000000000000000000000000000000000000000007a120000000000000000000000000000000000000000000000000000000005c631f800000000000000000000000000000000000000000000000000000000000006f640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000049118e004044dd2be62075588fcaf2a617fe7dcd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061a8000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064bb8ce526000000000000000000000000569db0654a0c9844257a7f496e02f9e7bc805c0b00000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000071afd498d00000000000000000000000000000000000000000000000000000000000000000000
